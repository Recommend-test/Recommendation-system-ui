import { CreateEntityReducerConfig, EntityReducer, EntityState, CreateEntityReducerPayload } from "../models";
/**
 * Creates a reducer for the specified entity type that reacts to basic operations
 * (add, update, remove, select, set, and clear)
 * @param {CreateEntityReducerPayload<TEntity, TState>} payload
 * @param {CreateEntityReducerConfig<TEntity, TState>} payload
 *
 * @returns {EntityReducer<TEntity, TState>}
 *
 * @example
 * // Create an entity reducer
 * import { createEntityReducer } from "entity-store";
 *
 * const userReducer = createEntityReducer({
 *      entityType: "User"
 * });
 *
 * @example
 * // Create an entity reducer in a store feature
 * import { createEntityReducer } from "entity-store";
 *
 * const userReducer = createEntityReducer({
 *      entityType: "Location",
 *      storeFeature: "LocationManager"
 * });
 */
export declare function createEntityReducer<TEntity, TState extends EntityState<TEntity>>(payload: CreateEntityReducerPayload<TEntity, TState>, config?: CreateEntityReducerConfig<TEntity, TState>): EntityReducer<TEntity, TState>;
