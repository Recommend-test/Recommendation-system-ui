"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var create_entity_state_function_1 = require("./create-entity-state.function");
var default_create_entity_reducer_config_model_1 = require("./default-create-entity-reducer-config.model");
var action_types_1 = require("./action-types");
/**
 * Creates a reducer for the specified entity type that reacts to basic operations
 * (add, update, remove, select, set, and clear)
 * @param {CreateEntityReducerPayload<TEntity, TState>} payload
 * @param {CreateEntityReducerConfig<TEntity, TState>} payload
 *
 * @returns {EntityReducer<TEntity, TState>}
 *
 * @example
 * // Create an entity reducer
 * import { createEntityReducer } from "entity-store";
 *
 * const userReducer = createEntityReducer({
 *      entityType: "User"
 * });
 *
 * @example
 * // Create an entity reducer in a store feature
 * import { createEntityReducer } from "entity-store";
 *
 * const userReducer = createEntityReducer({
 *      entityType: "Location",
 *      storeFeature: "LocationManager"
 * });
 */
function createEntityReducer(payload, config) {
    if (config === void 0) { config = default_create_entity_reducer_config_model_1.defaultCreateEntityReducerConfig; }
    var entityType = payload.entityType;
    var storeFeature = payload.storeFeature;
    var initialState = payload.initialState;
    if (initialState === null || initialState === undefined) {
        initialState = create_entity_state_function_1.createEntityState();
    }
    var additionalReducers = payload.additionalReducers;
    var actionTypes = action_types_1.createEntityActionTypes({
        entityType: entityType,
        storeFeature: storeFeature
    }, config.compositeEntityActionConfig);
    return function reducer(state, action, _additionalReducers) {
        if (state === void 0) { state = initialState; }
        if (_additionalReducers === void 0) { _additionalReducers = additionalReducers; }
        var reducedState = state;
        if (action_types_1.isCompositeEntityActionType(action.type, config.compositeEntityActionConfig) && action_types_1.isEntityTypeIncludedInActionType({
            actionType: action.type,
            entityType: entityType
        })) {
            var compositeTypeSegments = action_types_1.parseCompositeEntityActionType(action.type, config.compositeEntityActionConfig);
            var compositeAction = action;
            if (compositeTypeSegments.some(function (x) { return x === actionTypes.clearEntityActionType; })) {
                reducedState = config.entityStateTransformationConfig.clear(reducedState);
            }
            if (compositeTypeSegments.some(function (x) { return x === actionTypes.setEntityActionType; })) {
                var entities = compositeAction.payload.set.find(function (x) { return x.entityType === entityType; }).payload;
                reducedState = config.entityStateTransformationConfig.set(reducedState, entities);
            }
            if (compositeTypeSegments.some(function (x) { return x === actionTypes.addEntityActionType; })) {
                var entities = compositeAction.payload.add.find(function (x) { return x.entityType === entityType; }).payload;
                reducedState = config.entityStateTransformationConfig.add(reducedState, entities);
            }
            if (compositeTypeSegments.some(function (x) { return x === actionTypes.updateEntityActionType; })) {
                var entities = compositeAction.payload.update.find(function (x) { return x.entityType === entityType; }).payload;
                reducedState = config.entityStateTransformationConfig.update(reducedState, entities);
            }
            if (compositeTypeSegments.some(function (x) { return x === actionTypes.removeEntityActionType; })) {
                var ids = compositeAction.payload.remove.find(function (x) { return x.entityType === entityType; }).payload;
                reducedState = config.entityStateTransformationConfig.remove(reducedState, ids);
            }
            if (compositeTypeSegments.some(function (x) { return x === actionTypes.selectEntityActionType; })) {
                var ids = compositeAction.payload.select.find(function (x) { return x.entityType === entityType; }).payload;
                reducedState = config.entityStateTransformationConfig.select(reducedState, ids);
            }
        }
        if (_additionalReducers) {
            _additionalReducers.forEach(function (additionalReducer) {
                reducedState = additionalReducer(reducedState, action);
            });
        }
        return reducedState;
    };
}
exports.createEntityReducer = createEntityReducer;
