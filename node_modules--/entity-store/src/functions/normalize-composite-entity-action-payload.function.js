"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function flattenEntityMapPayloadToArray(payload, storeFeature) {
    return Object.keys(payload).map(function (entityType) {
        return {
            payload: payload[entityType],
            entityType: entityType,
            storeFeature: storeFeature
        };
    });
}
function normalizeCompositeEntityActionPayload(payload) {
    var result = {
        add: null,
        clear: null,
        remove: null,
        select: null,
        set: null,
        update: null
    };
    if (payload.add) {
        result.add = Array.isArray(payload.add) ? payload.add : flattenEntityMapPayloadToArray(payload.add, payload.storeFeature);
    }
    if (payload.clear) {
        result.clear = Array.isArray(payload.clear) && !payload.clear.every(function (x) { return typeof x === "string"; })
            ? payload.clear
            : payload.clear.map(function (entityType) {
                return { entityType: entityType, storeFeature: payload.storeFeature };
            });
    }
    if (payload.remove) {
        result.remove = Array.isArray(payload.remove) ? payload.remove : flattenEntityMapPayloadToArray(payload.remove, payload.storeFeature);
    }
    if (payload.update) {
        result.update = Array.isArray(payload.update) ? payload.update : flattenEntityMapPayloadToArray(payload.update, payload.storeFeature);
    }
    if (payload.set) {
        result.set = Array.isArray(payload.set) ? payload.set : flattenEntityMapPayloadToArray(payload.set, payload.storeFeature);
    }
    if (payload.select) {
        result.select = Array.isArray(payload.select) ? payload.select : flattenEntityMapPayloadToArray(payload.select, payload.storeFeature);
    }
    return result;
}
exports.normalizeCompositeEntityActionPayload = normalizeCompositeEntityActionPayload;
